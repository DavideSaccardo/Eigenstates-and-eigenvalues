#include "jacobi.h"

void jacobi(double rho_min,double rho_max, int n, int interagent, double** A, double** R, double* eig_v, double eps, int method,double omega){ //dimension matrix eig_v=n-1
    double max_off;
    int k,l;
    max_off = get_max(A, k, l, n-1);
    int iterations = 0;

    clock_t start, finish;
    start = clock();
    //bruteforce
        if(method==0){
            while(max_off> eps && iterations < 1e6){
            int p, q;
            max_off = get_max(A, p, q, n-1);
            rotate(A,R, p, q, n-1);
            iterations++;
            }
        }
         if(method==1){
             while(max_off> eps && iterations < 1e6){ //cyclic
            for(int i=1;i<n-1;i++) {
                for(int j=i+1;j<n-2;j++){
                    rotate(A,R, i, j, n-1);
                    iterations++;
                }
            }
          }
       }

    finish = clock();
    double timeused = (double) (finish - start)/(CLOCKS_PER_SEC );

    for (int i = 0; i < n-1; i++){
        eig_v[i] = A[i][i];
      // cout << eig_v[i] << endl;
    }

   order_eigpairs(n,eig_v, R);

}
